services:
  api: &main_app
    image: ${IMAGE_URI}
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.user_service.rule=Host(`${PRODUCT_CATALOG_TRAEFIK_HOST:-user_service.localhost}`) || PathPrefix(`/user-service`)
      - traefik.http.routers.user_service.entrypoints=web
      - traefik.http.routers.user_service.service=user_service
      - traefik.http.services.user_service.loadbalancer.server.port=${USER_SERVICE_PORT:-8000}
      - traefik.http.middlewares.user_service_strip.stripPrefix.prefixes=/user-service
      - traefik.http.routers.user_service.middlewares=user_service_strip
    networks:
      - traefik-shared
    depends_on:
      db:
        condition: service_healthy
    environment:
      HOST: 0.0.0.0
      PORT: 8000
      ENVIRONMENT: production
      SECRET_KEY: 
      EMAIL: 
      EMAIL_PASSWORD: 
      TOKEN_DURATION_IN_SECONDS: 600000
      REFRESH_TOKEN_DURATION_IN_SECONDS: 3600000
      VERIFICATION_PIN_DURATION_IN_SECONDS: 600
      BLOCKING_TIME_WINDOW_IN_SECONDS: 30
      BLOCKING_DURATION_IN_SECONDS: 600 
      LOGIN_ATTEMPTS_LIMIT: 5
      API_PATH_PREFIX: /user-service
      DATABASE_HOST: db
      DATABASE_PORT: 5432
      DATABASE_USER: postgres
      DATABASE_PASSWORD: password
      DATABASE_NAME: users_db

  db:
    image: postgres:latest
    hostname: users-db
    environment:
      PGPORT: 5432
      PGUSER: postgres
      POSTGRES_PASSWORD: password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10

    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - pgdata:/var/lib/postgresql/data 

  # migrator:
  #   image: ${IMAGE_URI}
  #   restart: "no"
  #   command: alembic upgrade heads
  #   networks:
  #     - traefik-shared
  #   environment:
  #     PRODUCT_CATALOG_DB_HOST: product-catalog-db
  #     PRODUCT_CATALOG_DB_PORT: 5432
  #     PRODUCT_CATALOG_DB_USER: user_service
  #     PRODUCT_CATALOG_DB_PASS: user_service
  #     PRODUCT_CATALOG_DB_BASE: user_service
  #   depends_on:
  #     db:
  #       condition: service_healthy

volumes:
  pgdata:

networks:
  traefik-shared:
    external: true
