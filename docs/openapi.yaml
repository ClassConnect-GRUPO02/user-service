openapi: 3.0.0
info:
  title: User service API
  version: 1.0.0


  # router.POST("/users", handler.CreateUser)
	# router.POST("/login", handler.HandleLogin)
	# router.POST("/biometric-login", handler.HandleBiometricLogin)
	# router.GET("/users", handler.GetUsers)
	# router.POST("/users/verify", handler.VerifyUserEmail)
	# router.POST("/users/request-new-pin", handler.RequestNewPin)
	# router.GET("/user/:id", handler.GetUser)
	# router.PUT("/user/:id", handler.EditUser)
	# router.GET("/check-email-exists/:email", handler.EmailExists)
	# router.POST("/users/:id/push-token", handler.AddPushToken)
	# router.POST("/users/:id/notifications", handler.NotifyUser)
	# router.PUT("/users/reset-password", handler.ResetPassword)
	# router.POST("/users/forgot-password", handler.ForgotPassword)
	# router.PUT("/users/:id/notification-settings", handler.SetUserNotificationSettings)
	# router.GET("/users/:id/notification-settings", handler.GetUserNotificationSettings)
	# router.POST("/auth/google", handler.HandleGoogleAuth)
	# router.POST("/auth/link-gmail", handler.LinkGoogleEmail)

	# router.POST("/admin-login", handler.HandleAdminLogin)
	# router.POST("/admins", handler.CreateAdmin)
	# router.PUT("/user/:id/block", handler.BlockUser)
	# router.PUT("/user/:id/unblock", handler.UnblockUser)
	# router.PUT("/user/:id/type/:type", handler.SetUserType)

paths:
  /users:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: Course created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Course'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: Retrieve all courses
      responses:
        '200':
          description: A list of courses
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Course'

  /courses/{id}:
    get:
      summary: Retrieve a course by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Course retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Course'
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete a course by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Course deleted successfully
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    Course:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string

    CreateUserRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        userType:
          type: string
        latitude:
          type: float
        longitude:
          type: float

    ErrorResponse:
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        instance:
          type: string
