// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "user_service/models"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// ActivateUserEmail provides a mock function with given fields: email
func (_m *Repository) ActivateUserEmail(email string) error {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for ActivateUserEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddAdmin provides a mock function with given fields: email, name, password
func (_m *Repository) AddAdmin(email string, name string, password string) error {
	ret := _m.Called(email, name, password)

	if len(ret) == 0 {
		panic("no return value specified for AddAdmin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(email, name, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUser provides a mock function with given fields: user
func (_m *Repository) AddUser(user models.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for AddUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUserPushToken provides a mock function with given fields: id, token
func (_m *Repository) AddUserPushToken(id int64, token string) error {
	ret := _m.Called(id, token)

	if len(ret) == 0 {
		panic("no return value specified for AddUserPushToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = rf(id, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddVerificationPin provides a mock function with given fields: pin, email, expiresAt
func (_m *Repository) AddVerificationPin(pin int, email string, expiresAt int) error {
	ret := _m.Called(pin, email, expiresAt)

	if len(ret) == 0 {
		panic("no return value specified for AddVerificationPin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, int) error); ok {
		r0 = rf(pin, email, expiresAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AdminPasswordMatches provides a mock function with given fields: email, password
func (_m *Repository) AdminPasswordMatches(email string, password string) (bool, error) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for AdminPasswordMatches")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdminIdByEmail provides a mock function with given fields: email
func (_m *Repository) GetAdminIdByEmail(email string) (string, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetAdminIdByEmail")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPin provides a mock function with given fields: pin, email
func (_m *Repository) GetPin(pin int, email string) (int, bool, error) {
	ret := _m.Called(pin, email)

	if len(ret) == 0 {
		panic("no return value specified for GetPin")
	}

	var r0 int
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(int, string) (int, bool, error)); ok {
		return rf(pin, email)
	}
	if rf, ok := ret.Get(0).(func(int, string) int); ok {
		r0 = rf(pin, email)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int, string) bool); ok {
		r1 = rf(pin, email)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(int, string) error); ok {
		r2 = rf(pin, email)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetStudentNotificationSettings provides a mock function with given fields: id
func (_m *Repository) GetStudentNotificationSettings(id int64) (*models.StudentNotificationSettingsRequest, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetStudentNotificationSettings")
	}

	var r0 *models.StudentNotificationSettingsRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*models.StudentNotificationSettingsRequest, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *models.StudentNotificationSettingsRequest); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.StudentNotificationSettingsRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeacherNotificationSettings provides a mock function with given fields: id
func (_m *Repository) GetTeacherNotificationSettings(id int64) (*models.TeacherNotificationSettingsRequest, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTeacherNotificationSettings")
	}

	var r0 *models.TeacherNotificationSettingsRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*models.TeacherNotificationSettingsRequest, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *models.TeacherNotificationSettingsRequest); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TeacherNotificationSettingsRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: id
func (_m *Repository) GetUser(id string) (*models.UserInfo, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *models.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.UserInfo, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *models.UserInfo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserIdByEmail provides a mock function with given fields: email
func (_m *Repository) GetUserIdByEmail(email string) (string, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserIdByEmail")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserNotificationSettings provides a mock function with given fields: id
func (_m *Repository) GetUserNotificationSettings(id int64) (bool, bool, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserNotificationSettings")
	}

	var r0 bool
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(int64) (bool, bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int64) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(int64) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserPushToken provides a mock function with given fields: id
func (_m *Repository) GetUserPushToken(id int64) (string, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPushToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserType provides a mock function with given fields: id
func (_m *Repository) GetUserType(id int64) (string, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserType")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with no fields
func (_m *Repository) GetUsers() ([]models.UserPublicInfo, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []models.UserPublicInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.UserPublicInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.UserPublicInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UserPublicInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersFullInfo provides a mock function with given fields: blockingDuration
func (_m *Repository) GetUsersFullInfo(blockingDuration int64) ([]models.UserFullInfo, error) {
	ret := _m.Called(blockingDuration)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersFullInfo")
	}

	var r0 []models.UserFullInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]models.UserFullInfo, error)); ok {
		return rf(blockingDuration)
	}
	if rf, ok := ret.Get(0).(func(int64) []models.UserFullInfo); ok {
		r0 = rf(blockingDuration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UserFullInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(blockingDuration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementFailedLoginAttempts provides a mock function with given fields: email, blockingTimeWindow
func (_m *Repository) IncrementFailedLoginAttempts(email string, blockingTimeWindow int64) (int64, error) {
	ret := _m.Called(email, blockingTimeWindow)

	if len(ret) == 0 {
		panic("no return value specified for IncrementFailedLoginAttempts")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int64) (int64, error)); ok {
		return rf(email, blockingTimeWindow)
	}
	if rf, ok := ret.Get(0).(func(string, int64) int64); ok {
		r0 = rf(email, blockingTimeWindow)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, int64) error); ok {
		r1 = rf(email, blockingTimeWindow)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAdminEmailRegistered provides a mock function with given fields: email
func (_m *Repository) IsAdminEmailRegistered(email string) (bool, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for IsAdminEmailRegistered")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsEmailRegistered provides a mock function with given fields: email
func (_m *Repository) IsEmailRegistered(email string) (bool, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for IsEmailRegistered")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PasswordMatches provides a mock function with given fields: email, password
func (_m *Repository) PasswordMatches(email string, password string) (bool, error) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for PasswordMatches")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPinAsConsumed provides a mock function with given fields: pin, email
func (_m *Repository) SetPinAsConsumed(pin int, email string) error {
	ret := _m.Called(pin, email)

	if len(ret) == 0 {
		panic("no return value specified for SetPinAsConsumed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(pin, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStudentNotificationSettings provides a mock function with given fields: id, notificationSettings
func (_m *Repository) SetStudentNotificationSettings(id int64, notificationSettings models.StudentNotificationSettingsRequest) error {
	ret := _m.Called(id, notificationSettings)

	if len(ret) == 0 {
		panic("no return value specified for SetStudentNotificationSettings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, models.StudentNotificationSettingsRequest) error); ok {
		r0 = rf(id, notificationSettings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetTeacherNotificationSettings provides a mock function with given fields: id, notificationSettings
func (_m *Repository) SetTeacherNotificationSettings(id int64, notificationSettings models.TeacherNotificationSettingsRequest) error {
	ret := _m.Called(id, notificationSettings)

	if len(ret) == 0 {
		panic("no return value specified for SetTeacherNotificationSettings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, models.TeacherNotificationSettingsRequest) error); ok {
		r0 = rf(id, notificationSettings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetUserBlockedUntil provides a mock function with given fields: id, timestamp
func (_m *Repository) SetUserBlockedUntil(id int64, timestamp int64) error {
	ret := _m.Called(id, timestamp)

	if len(ret) == 0 {
		panic("no return value specified for SetUserBlockedUntil")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(id, timestamp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetUserNotificationSettings provides a mock function with given fields: id, pushNotifications, emailNotifications
func (_m *Repository) SetUserNotificationSettings(id int64, pushNotifications bool, emailNotifications bool) error {
	ret := _m.Called(id, pushNotifications, emailNotifications)

	if len(ret) == 0 {
		panic("no return value specified for SetUserNotificationSettings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, bool, bool) error); ok {
		r0 = rf(id, pushNotifications, emailNotifications)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetUserType provides a mock function with given fields: id, userType
func (_m *Repository) SetUserType(id int64, userType string) error {
	ret := _m.Called(id, userType)

	if len(ret) == 0 {
		panic("no return value specified for SetUserType")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = rf(id, userType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: id, name, email
func (_m *Repository) UpdateUser(id int64, name string, email string) error {
	ret := _m.Called(id, name, email)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string, string) error); ok {
		r0 = rf(id, name, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserBlockedUntil provides a mock function with given fields: email
func (_m *Repository) UserBlockedUntil(email string) (int64, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for UserBlockedUntil")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserIsActivated provides a mock function with given fields: email
func (_m *Repository) UserIsActivated(email string) (bool, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for UserIsActivated")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
